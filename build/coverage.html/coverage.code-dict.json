{"/home/travis/build/npmtest/node-npmtest-node-osc/test.js":"/* istanbul instrument in package npmtest_node_osc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-osc/lib.npmtest_node_osc.js":"/* istanbul instrument in package npmtest_node_osc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_osc = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_osc = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-osc/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-osc && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_osc */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_osc\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_osc.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_osc.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_osc.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_osc.__dirname + '/lib.npmtest_node_osc.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-osc/node_modules/node-osc/lib/index.js":"'use strict';\n\nmodule.exports = {\n  Message: require('./Message'),\n  Client: require('./Client'),\n  Server: require('./Server')\n};\n","/home/travis/build/npmtest/node-npmtest-node-osc/node_modules/node-osc/lib/Message.js":"'use strict';\n\nfunction Message(address) {\n    this.oscType = 'message';\n    this.address = address;\n    this.args = [];\n\n    for (var i = 1; i < arguments.length; i++) {\n        this.append(arguments[i]);\n    }\n}\n\nfunction Argument(type, value){\n    this.type = type;\n    this.value = value;\n}\n\nMessage.prototype = {\n    append: function (arg) {\n        var argOut;\n        switch (typeof arg) {\n        case 'object':\n            if (arg instanceof Array) {\n                for (var i = 0; i < arg.length; i++) {\n                    this.append(arg[i]);\n                }\n            } else if (arg.type) {\n                this.args.push(arg);\n            } else {\n                throw new Error('don\\'t know how to encode object ' + arg);\n            }\n            break;\n        case 'number':\n            if (Math.floor(arg) === arg) {\n                argOut = new Argument('integer', arg);\n                this.args.push(argOut);\n            } else {\n                argOut = new Argument('float', arg);\n                this.args.push(argOut);\n            }\n            break;\n        case 'string':\n            argOut = new Argument('string', arg);\n            this.args.push(argOut);\n            break;\n        default:\n            throw new Error('don\\'t know how to encode ' + arg);\n        }\n    }\n};\n\nmodule.exports = Message;\n","/home/travis/build/npmtest/node-npmtest-node-osc/node_modules/node-osc/lib/Client.js":"'use strict';\n\nvar dgram = require('./safeDgram');\n\nvar min = require('osc-min');\n\nvar Message = require('./Message');\n\nvar Client = function (host, port) {\n    this.host = host;\n    this.port = port;\n    this._sock = dgram();\n    this.kill = function() {\n        this._sock.close();\n    };\n};\n\nClient.prototype = {\n    send: function (message) {\n        var mes;\n        var buf;\n        var callback;\n        var args = Array.prototype.slice.call(arguments);\n        var last = args[args.length - 1];\n        if (typeof last === 'function') {\n          callback = args.pop();\n        }\n        else {\n          callback = function () {};\n        }\n        if (message instanceof Array) {\n          message = {\n            address: message[0],\n            args: message.splice(1)\n          }\n        }\n\n        switch (typeof message) {\n            case 'object':\n                buf = min.toBuffer(message);\n                this._sock.send(buf, 0, buf.length, this.port, this.host, callback);\n                break;\n            case 'string':\n                mes = new Message(args[0]);\n                for (var i = 1; i < args.length; i++) {\n                    mes.append(args[i]);\n                }\n                buf = min.toBuffer(mes);\n                this._sock.send(buf, 0, buf.length, this.port, this.host, callback);\n                break;\n            default:\n                throw new Error('That Message Just Doesn\\'t Seem Right');\n        }\n    }\n};\n\nmodule.exports = Client;\n","/home/travis/build/npmtest/node-npmtest-node-osc/node_modules/node-osc/lib/safeDgram.js":"'use strict';\n\nvar dgram = require('dgram');\n\nvar semver = require('semver');\n\nfunction safeDgram() {\n  if (semver.gt(process.version, '0.12.0')) {\n    return dgram.createSocket({\n      type: 'udp4',\n      reuseAddr: true\n    });\n  }\n  return dgram.createSocket('udp4');\n}\n\nmodule.exports = safeDgram;\n","/home/travis/build/npmtest/node-npmtest-node-osc/node_modules/node-osc/lib/Server.js":"'use strict';\n\nvar dgram = require('./safeDgram');\nvar util = require('util');\nvar events = require('events');\n\nvar decode = require('./decode');\n\nvar Server = function(port, host) {\n    var server;\n    events.EventEmitter.call(this);\n    this.port = port;\n    this.host = host;\n    this._sock = dgram();\n    this._sock.bind(port);\n    server = this;\n    this._sock.on('message', function (msg, rinfo) {\n        try {\n            var decoded = decode(msg);\n            // [<address>, <typetags>, <values>*]\n        }\n        catch (e) {\n            console.log('can\\'t decode incoming message: ' + e.message);\n        }\n\n        if (decoded) {\n            server.emit('message', decoded, rinfo);\n            server.emit(decoded[0], decoded, rinfo);\n        }\n    });\n    this.kill = function() {\n        this._sock.close();\n    };\n};\n\nutil.inherits(Server, events.EventEmitter);\n\nmodule.exports = Server;\n","/home/travis/build/npmtest/node-npmtest-node-osc/node_modules/node-osc/lib/decode.js":"'use strict';\n\nvar types = require('./types');\n\nvar TInt = types.TInt;\nvar TFloat = types.TFloat;\nvar TString = types.TString;\nvar TBlob = types.TBlob;\nvar TDouble = types.TDouble;\nvar TTime = types.TTime;\nvar TTrue = types.TTrue;\nvar TFalse = types.TFalse;\n\n// for each OSC type tag we use a specific constructor function to decode its respective data\nvar tagToConstructor = { 'i': function () { return new TInt(); },\n                         'f': function () { return new TFloat(); },\n                         's': function () { return new TString(); },\n                         'b': function () { return new TBlob(); },\n                         'd': function () { return new TDouble(); },\n                         'T': function () { return new TTrue(); },\n                         'F': function () { return new TFalse(); } };\n\nfunction decode (data) {\n    // this stores the decoded data as an array\n    var message = [];\n\n    // we start getting the <address> and <rest> of OSC msg /<address>\\0<rest>\\0<typetags>\\0<data>\n    var address = new TString();\n    data = address.decode(data);\n\n    // Checking if we received a bundle (typical for TUIO/OSC)\n    if (address.value === '#bundle') {\n        var time = new TTime();\n        data = time.decode(data);\n\n        message.push('#bundle');\n        message.push(time.value);\n\n        var length, part;\n        while(data.length > 0) {\n            length = new TInt();\n            data = length.decode(data);\n\n            part = data.slice(0, length.value);\n            //message = message.concat(decode(part));\n            message.push(decode(part));\n\n            data = data.slice(length.value, data.length);\n        }\n\n    } else if (data.length > 0) {\n        message.push(address.value);\n\n        // if we have rest, maybe we have some typetags... let see...\n\n        // now we advance on the old rest, getting <typetags>\n        var typetags = new TString();\n        data = typetags.decode(data);\n        typetags = typetags.value;\n        // so we start building our message list\n        if (typetags[0] !== ',') {\n            throw new Error('invalid type tag in incoming OSC message, must start with comma');\n        }\n        for (var i = 1; i < typetags.length; i++) {\n            var constructor = tagToConstructor[typetags[i]];\n            if (!constructor) {\n                throw new Error('Unsupported OSC type tag ' + typetags[i] + ' in incoming message');\n            }\n            var argument = constructor();\n            data = argument.decode(data);\n            message.push(argument.value);\n        }\n    }\n\n    return message;\n}\n\nmodule.exports = decode;\n","/home/travis/build/npmtest/node-npmtest-node-osc/node_modules/node-osc/lib/types.js":"'use strict';\n\nvar jspack = require('jspack').jspack;\n\nvar pack = jspack.packTo;\n\nfunction ShortBuffer(type, buf, requiredLength)\n{\n    this.type = 'ShortBuffer';\n    var message = 'buffer [';\n    for (var i = 0; i < buf.length; i++) {\n        if (i) {\n            message += ', ';\n        }\n        message += buf.charCodeAt(i);\n    }\n    message += '] too short for ' + type + ', ' + requiredLength + ' bytes required';\n    this.message = message;\n}\n\nfunction TString (value) { this.value = value; }\n\nTString.prototype = {\n    typetag: 's',\n    decode: function (data) {\n        var end = 0;\n        while (data[end] && end < data.length) {\n            end++;\n        }\n        if (end === data.length) {\n            throw Error('OSC string not null terminated');\n        }\n        this.value = data.toString('ascii', 0, end);\n        var nextData = parseInt(Math.ceil((end + 1) / 4.0) * 4);\n        return data.slice(nextData);\n    },\n    encode: function (buf, pos) {\n        var len = Math.ceil((this.value.length + 1) / 4.0) * 4;\n        return pack('>' + len + 's', buf, pos, [ this.value ]);\n    }\n};\n\nexports.TString = TString;\n\nfunction TInt (value) { this.value = value; }\n\nTInt.prototype = {\n    typetag: 'i',\n    decode: function (data) {\n        if (data.length < 4) {\n            throw new ShortBuffer('int', data, 4);\n        }\n\n        this.value = jspack.Unpack('>i', data.slice(0, 4))[0];\n        return data.slice(4);\n    },\n    encode: function (buf, pos) {\n        return pack('>i', buf, pos, [ this.value ]);\n    }\n};\n\nexports.TInt = TInt;\n\nfunction TTime (value) { this.value = value; }\n\nTTime.prototype = {\n    typetag: 't',\n    decode: function (data) {\n        if (data.length < 8) {\n            throw new ShortBuffer('time', data, 8);\n        }\n        var raw = jspack.Unpack('>LL', data.slice(0, 8));\n        var secs = raw[0];\n        var fracs = raw[1];\n        this.value = secs + fracs / 4294967296;\n        return data.slice(8);\n    },\n    encode: function (buf, pos) {\n        return pack('>LL', buf, pos, this.value);\n    }\n};\n\nexports.TTime = TTime;\n\nfunction TFloat (value) { this.value = value; }\nTFloat.prototype = {\n    typetag: 'f',\n    decode: function (data) {\n        if (data.length < 4) {\n            throw new ShortBuffer('float', data, 4);\n        }\n\n        this.value = jspack.Unpack('>f', data.slice(0, 4))[0];\n        return data.slice(4);\n    },\n    encode: function (buf, pos) {\n        return pack('>f', buf, pos, [ this.value ]);\n    }\n};\n\nexports.TFloat = TFloat;\n\nfunction TBlob (value) { this.value = value; }\nTBlob.prototype = {\n    typetag: 'b',\n    decode: function (data) {\n        var length = jspack.Unpack('>i', data.slice(0, 4))[0];\n        var nextData = parseInt(Math.ceil((length) / 4.0) * 4) + 4;\n        this.value = data.slice(4, length + 4);\n        return data.slice(nextData);\n    },\n    encode: function (buf, pos) {\n        var len = Math.ceil((this.value.length) / 4.0) * 4;\n        return pack('>i' + len + 's', buf, pos, [len, this.value]);\n    }\n};\n\nexports.TBlob = TBlob;\n\nfunction TDouble (value) { this.value = value; }\nTDouble.prototype = {\n    typetag: 'd',\n    decode: function (data) {\n        if (data.length < 8) {\n            throw new ShortBuffer('double', data, 8);\n        }\n        this.value = jspack.Unpack('>d', data.slice(0, 8))[0];\n        return data.slice(8);\n    },\n    encode: function (buf, pos) {\n        return pack('>d', buf, pos, [ this.value ]);\n    }\n};\n\nexports.TDouble = TDouble;\n\nfunction TTrue (value) { this.value = value; }\nTTrue.prototype = {\n    typetag: 'T',\n    decode: function (data) {\n        this.value = true\n        return data;\n    },\n    encode: function (buf, pos) {\n        return pack('>T', buf, pos, [ true ]);\n    }\n};\n\nexports.TTrue = TTrue;\n\nfunction TFalse (value) { this.value = value; }\nTFalse.prototype = {\n    typetag: 'F',\n    decode: function (data) {\n        this.value = false\n        return data;\n    },\n    encode: function (buf, pos) {\n        return pack('>F', buf, pos, [ false ]);\n    }\n};\n\nexports.TFalse = TFalse;\n"}